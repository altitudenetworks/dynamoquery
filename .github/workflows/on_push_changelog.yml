name: Update release draft

on:
  push:
    branches:
      - master
      - ci-test
    paths:
      - CHANGELOG.md

jobs:
  update-draft:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U logchange newversion
      - name: Get Unreleased notes
        id: body
        run: |
          RESULT=`python -m logchange get unreleased | python -m logchange format`
          echo ${RESULT}
          echo "::set-output name=result::${RESULT}"
      - name: Get release version
        id: version
        env:
          BODY: ${{ steps.body.outputs.result }}
        run: |
          VERSION=`python setup.py --version | python -m newversion`
          RESULT=`echo "${BODY}" | python -m logchange rc_version ${VERSION}`
          echo "::set-output name=result::${RESULT}"
      - name: Get or create Release Draft
        id: release
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releases = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            for (const release of releases) {
              if (release.draft) return release;
              break;
            }

            const newRelease = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              draft: true,
              tag_name: "0.0.0",
              name: "0.0.0",
              body: "",
            });
            return newRelease;
      - name: Update Release Draft
        uses: actions/github-script@v3
        env:
          VERSION: ${{ steps.version.outputs.result }}
          BODY: ${{ steps.body.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.release.outputs.result.id }},
              tag_name: process.env.VERSION,
              name: process.env.VERSION,
              body: process.env.BODY,
              draft: true,
            });
