name: Create or update release draft

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - "docs/**"
      - "dynamo_query/version.txt"
      - "CHANGELOG.md"
      - "README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get PullRequest number
        uses: actions/github-script@0.9.0
        id: pr-number
        with:
          result-encoding: string
          script: |
            console.log('context', context)
            const message = context.payload.head_commit.message
            const match = message.match(/Merge pull request #(\d+)/)
            if (!match) {
              console.log('Not a PR commit, stopping')
              return
            }
            const prNumber = match[1];
            console.log('prNumber', prNumber)
            return prNumber
      - name: Get PR issue
        uses: actions/github-script@0.9.0
        id: issue
        if: steps.pr-number.outputs.result
        with:
          script: |
            const response = await github.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-number.outputs.result }}
            })
            const issue = response.data
            console.log('issue', issue)
            const labels = issue.labels.map(data => data.name)
            if (labels.includes('release')) {
              console.log('This is a release PR, skipping release update')
              return
            }
            return issue
      - name: Precalculate versions
        uses: actions/github-script@0.9.0
        id: versions
        if: steps.issue.outputs.result
        with:
          script: |
            const fs = require('fs')
            const strip = s => s.replace(/^\s+|\s+$/g, '')

            const version = strip(fs.readFileSync('dynamo_query/version.txt', 'utf8'))
            console.log('Current version', version)
            const [vMajor, vMinor, vPatch] = version.split('.', 3).map(x => parseInt(x))
            const majorBump = `${vMajor + 1}.0.0`
            const minorBump = `${vMajor}.${vMinor + 1}.0`
            const patchBump = `${vMajor}.${vMinor}.${vPatch + 1}`
            const result = {
              current: version,
              major: vMajor > 0 ? majorBump : patchBump,
              minor: vMajor > 0 ? minorBump : patchBump,
              patch: patchBump
            }
            console.log('versions', result)
            return result
      - name: Get or create a release draft
        uses: actions/github-script@0.9.0
        id: release
        if: steps.issue.outputs.result
        with:
          script: |
            const versions = ${{ steps.versions.outputs.result }}
            const releasesResponse = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const releases = releasesResponse.data
            console.log('releases', releases)

            if (releases.length && releases[0].draft) {
              console.log('existing release draft', releases[0])
              return releases[0]
            }

            const response = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: versions.patch,
              name: versions.patch,
              draft: true,
              body: [
                '### Notes',
                '',
                'Important info:',
                '- release notes are managed automatically',
                '- do not add new sections, but all sections can be edited, including this one',
                '- always edit release notes before publishing',
                '- on publish all release notes are included to `CHANGELOG.md`'
              ].join('\r\n')
            })
            console.log('new release draft', response.data)
            return response.data
      - name: Build release notes sections
        uses: actions/github-script@0.9.0
        id: sections
        if: steps.issue.outputs.result
        with:
          script: |
            const EOL = '\r\n'

            const issue = ${{ steps.issue.outputs.result }}
            const release = ${{ steps.release.outputs.result }}
            const versions = ${{ steps.versions.outputs.result }}

            const strip = s => s.replace(/^\s+|\s+$/g, '')

            const releaseTitles = [
              'Notes',
              'Added',
              'Changed',
              'Deprecated',
              'Removed',
              'Fixed'
            ]
            const prTitles = [
              'Added',
              'Changed',
              'Deprecated',
              'Removed',
              'Fixed'
            ]
            const getSections = (noteText, titles) => {
              const parts = `${EOL}${noteText}`.split(`${EOL}### `).slice(1).filter(part => part.length)
              return parts.map(
                part => {
                  const lines = part.split(EOL).filter(line => !line.startsWith('- **NOTE** '))
                  let lastLineIndex = lines.findIndex(line => line.startsWith('## '))
                  lastLineIndex = lastLineIndex >= 0 ? lastLineIndex : 99999
                  return [
                    strip(lines.slice(0, 1).join('')),
                    strip(lines.slice(1, lastLineIndex).join(EOL)),
                  ]
                }
              ).filter(
                ([title, content]) => titles.includes(title) && content.length
              )
            }
            const releaseSections = getSections(release.body, releaseTitles)
            console.log('release sections', releaseSections)
            const prLink = `[#${issue.number}](${issue.pull_request.html_url})`
            const prSections = getSections(issue.body, prTitles).map(
              ([prTitle, prContent]) => ([prTitle, `${prContent} ${prLink}`])
            )
            console.log('PR sections', prSections)
            const existingTitles = releaseSections.map(([title, content]) => title)

            const updatedReleaseSections = releaseSections.map(([title, content]) => ([
              title,
              [
                content,
                ...prSections.filter(
                  ([prTitle, prContent]) => prTitle == title
                ).map(
                  ([prTitle, prContent]) => prContent
                )
              ].join(EOL)
            ]))
            const addedReleaseSections = prSections.filter(
              ([prTitle, prContent]) => !existingTitles.includes(prTitle)
            )

            const result = [
              ...updatedReleaseSections,
              ...addedReleaseSections
            ].sort((a, b) => {
              const aIndex = releaseTitles.indexOf(a[0])
              const bIndex = releaseTitles.indexOf(b[0])
              return a - b
            })
            console.log('result', result)
            return result
      - name: Calculate new version for release notes
        uses: actions/github-script@0.9.0
        id: new-version
        if: steps.issue.outputs.result
        with:
          result-encoding: string
          script: |
            const versions = ${{ steps.versions.outputs.result }}
            const sections = ${{ steps.sections.outputs.result }}

            const titles = sections.map(([title, content]) => title)
            const majorTitles = ['Removed'].filter(title => titles.includes(title))
            const minorTitles = ['Added', 'Changed', 'Deprecated'].filter(title => titles.includes(title))

            if (majorTitles.length) {
                return versions.major
            }
            if (minorTitles.length) {
              return versions.minor
            }
            return versions.patch
      - name: Update release draft
        uses: actions/github-script@0.9.0
        if: steps.issue.outputs.result
        with:
          script: |
            const EOL = '\r\n'

            const release = ${{ steps.release.outputs.result }}
            const newVersion = '${{ steps.new-version.outputs.result }}'
            const sections = ${{ steps.sections.outputs.result }}

            const bodyParts = sections.map(
              ([sectionTitle, sectionContent]) => `### ${sectionTitle}${EOL}${EOL}${sectionContent}`
            )
            const body = bodyParts.join(`${EOL}${EOL}`)

            return await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              tag_name: newVersion,
              name: newVersion,
              draft: true,
              body: body
            })
